# https://www.haproxy.com/documentation/hapee/latest/onepage/#home
global
    log stdout format raw local0
    lua-prepend-path /usr/local/crowdsec/lua/haproxy/?.lua
    lua-load /usr/local/crowdsec/lua/haproxy/crowdsec.lua
    setenv CROWDSEC_BAN_TEMPLATE_PATH /var/lib/crowdsec/lua/haproxy/templates/ban.html
    setenv CROWDSEC_CAPTCHA_TEMPLATE_PATH /var/lib/crowdsec/lua/haproxy/templates/captcha.html

defaults
    log global
    option httplog
    timeout client 1m
	timeout server 1m
	timeout connect 10s
	timeout http-keep-alive 2m
	timeout queue 15s
	timeout tunnel 4h  # for websocket

frontend test
    mode http
    bind *:9090
    
    unique-id-format %[uuid()]
    unique-id-header X-Unique-ID
    filter spoe engine crowdsec config /usr/local/etc/haproxy/crowdsec.cfg

    ## If you dont want to render any content, you can use the following line
    # tcp-request content reject if !{ var(txn.crowdsec.remediation) -m str "allow" }

    ## Drop ban requests before http handler is called
    # tcp-request content reject if { var(txn.crowdsec.remediation) -m str "ban" }

    ## Set a custom header on the request for upstream services to use
    http-request set-header X-CrowdSec-Remediation %[var(txn.crowdsec.remediation)] if { var(txn.crowdsec.remediation) -m found }
    
    http-request lua.crowdsec_render if !{ var(txn.crowdsec.remediation) -m str "allow" }

    use_backend test_backend

backend test_backend
    mode http
    server s1 whoami:2020
    
backend crowdsec-spoa
    mode tcp
    balance roundrobin
    timeout connect 5s # greater than hello timeout
    timeout server 3m  # greater than idle timeout
    #server s2 /run/crowdsec-spoa.sock
    server s2 spoa:9000
